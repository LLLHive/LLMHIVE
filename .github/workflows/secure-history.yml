name: Purge env files and guard

on:
  workflow_dispatch: {}                 # manual button, if visible
  # Fallback trigger: commit .github/trigger/run-purge on main
  push:
    branches: [main]
    paths:
      - '.github/trigger/run-purge'

permissions:
  contents: write                       # needed to push

concurrency:
  group: purge-history
  cancel-in-progress: true

jobs:
  purge_history:
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push'
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - name: Debug – show repo and token scope
        run: |
          echo "Repo: ${{ github.repository }}"
          echo "Event: ${{ github.event_name }}"
          git --version
          python3 --version || true

      - name: Ensure Python available (for git-filter-repo)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install git-filter-repo and prepare PATH
        run: |
          python3 -m pip install --user --upgrade pip
          python3 -m pip install --user git-filter-repo
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      - name: Build authenticated remote URL
        run: |
          echo "REPO_URL=https://x-access-token:${{ github.token }}@github.com/${{ github.repository }}.git" >> $GITHUB_ENV

      - name: Mirror clone ALL refs (branches + tags)
        run: |
          git clone --mirror "$REPO_URL" repo.mirror
          echo "Cloned mirror."

      - name: Run git filter-repo to remove env files from ALL history
        working-directory: repo.mirror
        run: |
          git filter-repo --path .env --path llmhive/env --invert-paths
          echo "Filter complete."

      - name: Limit push to branches & tags (avoid PR refs)
        working-directory: repo.mirror
        run: |
          git remote remove origin || true
          git remote add origin "$REPO_URL"
          git config remote.origin.mirror false
          git config --unset-all remote.origin.push || true
          git config --add remote.origin.push +refs/heads/*:refs/heads/*
          git config --add remote.origin.push +refs/tags/*:refs/tags/*
          git config --get-all remote.origin.push

      - name: Force-push cleaned history (heads & tags)
        working-directory: repo.mirror
        run: |
          set -x
          git push origin --force --all
          git push origin --force --tags
          set +x

      - name: Verify history is clean (should be 0 / 0)
        working-directory: repo.mirror
        run: |
          c1=$(git log --all --pretty=format:%H -- .env | wc -l | tr -d ' ')
          c2=$(git log --all --pretty=format:%H -- llmhive/env | wc -l | tr -d ' ')
          echo ".env commits: $c1"
          echo "llmhive/env commits: $c2"
          test "$c1" = "0" -a "$c2" = "0"

      - name: Normal clone to add ignore and template
        run: |
          git clone "$REPO_URL" repo.work

      - name: Ensure .env ignored and add .env.example
        working-directory: repo.work
        run: |
          DEFAULT_BRANCH=$(git remote show origin | sed -n '/HEAD branch/s/.*: //p')
          git checkout "$DEFAULT_BRANCH"
          touch .gitignore
          grep -qxF ".env" .gitignore || echo ".env" >> .gitignore
          if [ ! -f .env.example ]; then
            cat > .env.example <<'EOF'
# DO NOT COMMIT REAL KEYS
OPENAI_API_KEY=
ANTHROPIC_API_KEY=
GEMINI_API_KEY=
GROK_API_KEY=
DEEPSEEK_API_KEY=
MANUS_API_KEY=
EOF
          fi
          git rm -f --cached .env llmhive/env 2>/dev/null || true
          git add .gitignore .env.example || true
          git -c user.name="github-actions[bot]" -c user.email="41898282+github-actions[bot]@users.noreply.github.com" \
            commit -m "chore(security): ensure .env ignored; add .env.example" || echo "Nothing to commit"
          git push origin "$DEFAULT_BRANCH"

  guard:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Block tracked env files
        run: |
          set -e
          bad=0
          git ls-files --error-unmatch .env >/dev/null 2>&1 && { echo "Found tracked .env"; bad=1; }
          git ls-files --error-unmatch llmhive/env >/dev/null 2>&1 && { echo "Found tracked llmhive/env"; bad=1; }
          if [ "$bad" -ne 0 ]; then
            echo "❌ Do not commit env files. Use Secret Manager or env vars."
            exit 1
          fi
          echo "✅ No tracked env files found."
